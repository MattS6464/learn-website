---
layout: contentindex
---

<script>
	import { fade } from 'svelte/transition';
	import { db } from '$lib/app';
	import References from '$lib/components/mosaic/References.svelte';
	import ArrowRight from '$lib/components/ArrowRight.svelte';
	import FuzzySearch from 'fuzzy-search';	

	let references = db.filter(x => x.section === 'reference');

	let categorised = {
		'Analyse Data' : [],
		'Analyse Sound' : [],
		'Utility Objects' : [],
		'Decompose Sound' : [],
		'Slice Sound' : [],
		'Transform Sound' : []
	};
	let query = '';

	references.forEach(r => { 
		categorised[r.category].push(r)
	});

	const search = new FuzzySearch(references, ['title', 'tags', 'blurb', 'category'], {
		caseSensitive: false,
		sort: false
	})

	function populateItems() {
		return Object.entries(categorised).map(k => ({ "category" : k[0], "refs" : k[1] }));
	}
	let items = populateItems();
	function doSearch() {
		Object.keys(categorised).forEach(c => {
			categorised[c] = [];
		});
		let result = query === '' ? references : search.search(query);		
		result.forEach(r => { 
			categorised[r.category].push(r);
		});

		items = populateItems();
	}
</script>

<h1 class='title'>Reference</h1>

<form>
	<label class="visually-hidden" for="query"></label>
	<input 
	bind:value={query} 
	on:input={doSearch}
	placeholder='Enter a search term'
	>
</form>

<References bind:items={items} />

<style>
	form > input {
		margin-bottom: 1em;
		font-size: 1.5rem;
		border: none;
		outline: none;
		border-bottom: 1px solid grey;
	}
</style>